name: Enhanced SWE-Agent Multi-Context Support

on:
  # Support for issue comments (original functionality)
  issue_comment:
    types: [created]
  # Support for PR review comments
  pull_request_review_comment:
    types: [created]
  # Support for PR reviews
  pull_request_review:
    types: [submitted]

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  # Handle different contexts with appropriate logic
  swe-agent-multi-context:
    name: SWE-Agent Multi-Context Resolver
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@swe-agent')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@swe-agent')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@swe-agent'))
    
    outputs:
      patch_generated: ${{ steps.swe-agent.outputs.patch_generated }}
      patch_content: ${{ steps.swe-agent.outputs.patch_content }}
      execution_time: ${{ steps.swe-agent.outputs.execution_time }}
      context_type: ${{ steps.context-detection.outputs.context_type }}
    
    steps:
      - name: Detect Context Type
        id: context-detection
        shell: bash
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          
          if [ "${{ github.event_name }}" = "pull_request_review" ]; then
            echo "context_type=pr_review" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "comment_body=${{ github.event.review.body }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
            echo "context_type=pr_review_comment" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "comment_body=${{ github.event.comment.body }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            if [ -n "${{ github.event.issue.pull_request.url }}" ]; then
              echo "context_type=pr_comment" >> $GITHUB_OUTPUT
              echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            else
              echo "context_type=issue_comment" >> $GITHUB_OUTPUT
              echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            fi
            echo "comment_body=${{ github.event.comment.body }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Run Enhanced SWE-Agent
        id: swe-agent
        uses: nimishchaudhari/swe-agent-resolver@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          model_name: ${{ vars.SWE_AGENT_MODEL || 'gpt-4o' }}
          # Multi-context configuration
          context_mode: 'auto'                    # Auto-detect context
          pr_strategy: 'continue'                 # Continue existing PRs
          git_reference_mode: 'auto'              # Context-based Git refs
          enable_review_context: 'true'           # Handle review comments
          target_branch_strategy: 'auto'          # Context-based branching
          # Enhanced response modes
          response_mode: 'auto'                   # Auto-detect intent
          enable_visual_content: 'true'          # Enable visual responses
          visual_content_format: 'all'           # All visual formats
        env:
          # Pass context information
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_NUMBER: ${{ steps.context-detection.outputs.pr_number || steps.context-detection.outputs.issue_number }}
          GITHUB_EVENT_COMMENT_BODY: ${{ steps.context-detection.outputs.comment_body }}
          GITHUB_EVENT_ISSUE_TITLE: ${{ github.event.issue.title }}
          GITHUB_EVENT_ISSUE_BODY: ${{ github.event.issue.body }}
          GITHUB_EVENT_COMMENT_ID: ${{ github.event.comment.id }}

  # Handle PR-specific workflows (optional: only for PR contexts)
  handle-pr-context:
    name: Handle Pull Request Context
    needs: swe-agent-multi-context
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.swe-agent-multi-context.outputs.context_type == 'pr_comment' || 
       needs.swe-agent-multi-context.outputs.context_type == 'pr_review' ||
       needs.swe-agent-multi-context.outputs.context_type == 'pr_review_comment') &&
      needs.swe-agent-multi-context.outputs.patch_generated == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Apply patch to existing PR
        shell: bash
        env:
          PATCH_CONTENT: ${{ needs.swe-agent-multi-context.outputs.patch_content }}
          PR_NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
          MODEL_NAME: ${{ vars.SWE_AGENT_MODEL || 'gpt-4o' }}
          EXECUTION_TIME: ${{ needs.swe-agent-multi-context.outputs.execution_time }}
        run: |
          set -e
          
          # Get PR information
          PR_DATA=$(gh api repos/${{ github.repository }}/pulls/${PR_NUMBER})
          PR_HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref')
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          
          # Configure git
          git config --global user.name "swe-agent-bot[bot]"
          git config --global user.email "swe-agent-bot[bot]@users.noreply.github.com"
          
          # Checkout PR branch
          git fetch origin "$PR_HEAD_REF:$PR_HEAD_REF"
          git checkout "$PR_HEAD_REF"
          
          # Apply patch
          echo "$PATCH_CONTENT" > /tmp/swe_agent_fix.patch
          
          if git apply --check /tmp/swe_agent_fix.patch; then
            git apply /tmp/swe_agent_fix.patch
            
            # Commit changes
            git add -A
            git commit -m "ü§ñ SWE-Agent: Enhance PR based on feedback

Applied fixes using ${MODEL_NAME}
Execution time: ${EXECUTION_TIME}

Co-authored-by: swe-agent-bot[bot] <swe-agent-bot[bot]@users.noreply.github.com>"
            
            # Push changes
            git push origin "$PR_HEAD_REF"
            
            # Update PR comment
            COMMENT_ID="${{ github.event.comment.id }}"
            gh api repos/${{ github.repository }}/issues/comments/$COMMENT_ID \
              --method PATCH \
              --field body="‚úÖ **PR Enhanced Successfully!** 

üîÑ Applied SWE-Agent fixes to this Pull Request.

**Changes applied:**
- Enhanced based on review feedback
- Used model: ${MODEL_NAME}
- Execution time: ${EXECUTION_TIME}

The PR branch has been updated with the improvements. üöÄ"
            
          else
            echo "‚ùå Patch could not be applied cleanly"
            
            # Post patch for manual review
            gh api repos/${{ github.repository }}/issues/comments/$COMMENT_ID \
              --method PATCH \
              --field body="‚ö†Ô∏è **Patch Generated but Requires Manual Application**

The SWE-Agent generated a fix, but it conflicts with recent changes in the PR.

<details>
<summary>üìÑ Click to view generated patch</summary>

\`\`\`diff
${PATCH_CONTENT}
\`\`\`

</details>

Please apply this patch manually or resolve conflicts before merging."
            
            exit 1
          fi

  # Handle issue-specific workflows (optional: only for issue contexts)
  handle-issue-context:
    name: Handle Issue Context
    needs: swe-agent-multi-context
    runs-on: ubuntu-latest
    if: |
      always() && 
      needs.swe-agent-multi-context.outputs.context_type == 'issue_comment' &&
      needs.swe-agent-multi-context.outputs.patch_generated == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Create new PR for issue
        shell: bash
        env:
          PATCH_CONTENT: ${{ needs.swe-agent-multi-context.outputs.patch_content }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          MODEL_NAME: ${{ vars.SWE_AGENT_MODEL || 'gpt-4o' }}
          EXECUTION_TIME: ${{ needs.swe-agent-multi-context.outputs.execution_time }}
        run: |
          set -e
          
          # Configure git
          git config --global user.name "swe-agent-bot[bot]"
          git config --global user.email "swe-agent-bot[bot]@users.noreply.github.com"
          
          # Create new branch
          BRANCH_NAME="swe-agent-fix-issue-${ISSUE_NUMBER}-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          
          # Apply patch
          echo "$PATCH_CONTENT" > /tmp/swe_agent_fix.patch
          
          if git apply --check /tmp/swe_agent_fix.patch; then
            git apply /tmp/swe_agent_fix.patch
            
            # Commit changes
            git add -A
            git commit -m "ü§ñ Fix: $ISSUE_TITLE

Resolves #${ISSUE_NUMBER}

Applied automated fixes using ${MODEL_NAME}
Execution time: ${EXECUTION_TIME}

Co-authored-by: swe-agent-bot[bot] <swe-agent-bot[bot]@users.noreply.github.com>"
            
            # Push branch
            git push origin "$BRANCH_NAME"
            
            # Create PR
            DEFAULT_BRANCH=$(gh api repos/${{ github.repository }} --jq .default_branch)
            PR_TITLE="ü§ñ Fix: $ISSUE_TITLE"
            PR_BODY="## ü§ñ Automated Fix by SWE-Agent

This PR was automatically generated to resolve issue #${ISSUE_NUMBER}.

### üìã Changes Made
- Applied automated fixes using ${MODEL_NAME}
- Execution time: ${EXECUTION_TIME}

### üîó Related Issue
Fixes #${ISSUE_NUMBER}

### üöÄ Generated Patch
<details>
<summary>üìÑ Click to view the applied patch</summary>

\`\`\`diff
${PATCH_CONTENT}
\`\`\`

</details>

---
*ü§ñ This PR was automatically created by SWE-Agent*"
            
            PR_URL=$(gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base "$DEFAULT_BRANCH" --head "$BRANCH_NAME")
            
            # Update issue comment
            COMMENT_ID="${{ github.event.comment.id }}"
            gh api repos/${{ github.repository }}/issues/comments/$COMMENT_ID \
              --method PATCH \
              --field body="‚úÖ **Solution Generated & Pull Request Created!** 

üÜï Created a new Pull Request to resolve this issue.

**[View Pull Request](${PR_URL})**

**Summary:**
- Branch: \`${BRANCH_NAME}\`
- Model: ${MODEL_NAME}
- Execution time: ${EXECUTION_TIME}

The PR is ready for review! üöÄ"
            
          else
            echo "‚ùå Patch could not be applied cleanly"
            exit 1
          fi
