#!/root/python3.11/bin/python3
"""
Web Browser Tool - A unified interface for web browser automation.
This tool consolidates all web_browser functionality into a single command with subcommands,
following the design pattern of str_replace_editor.
"""

from __future__ import annotations

import argparse
import json
import sys
from pathlib import Path

# Add the lib directory to the path
lib_path = str(Path(__file__).resolve().parent.parent / "lib")
sys.path.insert(0, lib_path)

from browser_config import ClientConfig
from browser_utils import (
    _autosave_screenshot_from_response,
    _print_response_with_metadata,
    send_request,
)

config = ClientConfig()


class WebBrowserTool:
    """Web browser automation tool with subcommands for all browser operations."""

    def __init__(self):
        self.config = config

    def validate_command_args(self, command: str, args: argparse.Namespace):
        """Validate that required arguments are present for each command."""
        required_args = {
            "open_site": ["url"],
            "close_site": [],
            "screenshot_site": [],
            "click_mouse": ["x", "y"],
            "double_click_mouse": ["x", "y"],
            "move_mouse": ["x", "y"],
            "drag_mouse": ["path"],
            "type_text": ["text"],
            "scroll_on_page": ["scroll_x", "scroll_y"],
            "execute_script_on_page": ["script"],
            "navigate_back": [],
            "navigate_forward": [],
            "reload_page": [],
            "wait_time": ["ms"],
            "press_keys_on_page": ["keys"],
            "set_browser_window_size": ["width", "height"],
            "get_console_output": [],
        }

        if command not in required_args:
            print(f"Unknown command: {command}")
            sys.exit(1)

        missing_args = []
        for arg_name in required_args[command]:
            if not hasattr(args, arg_name) or getattr(args, arg_name) is None:
                missing_args.append(arg_name)

        if missing_args:
            print(f"Missing required arguments for {command}: {', '.join(missing_args)}")
            sys.exit(2)

    def open_site(self, url: str):
        """Open the specified website URL or local file path."""
        if Path(url).is_file():
            url = f"file://{Path(url).resolve()}"
        response = send_request(
            self.config.port, "goto", "POST", {"url": url, "return_screenshot": self.config.autoscreenshot}
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def close_site(self):
        """Close the currently open browser window."""
        response = send_request(self.config.port, "close", "POST", {"return_screenshot": False})
        if response is None:
            return
        _print_response_with_metadata(response)

    def screenshot_site(self):
        """Take a screenshot of the current page."""
        response = send_request(self.config.port, "screenshot", "GET")
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def click_mouse(self, x: int, y: int, button: str = "left"):
        """Click at the specified coordinates on the current page."""
        response = send_request(
            self.config.port,
            "click",
            "POST",
            {"x": x, "y": y, "button": button, "return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def double_click_mouse(self, x: int, y: int):
        """Double-click at the specified coordinates on the current page."""
        response = send_request(
            self.config.port,
            "double_click",
            "POST",
            {"x": x, "y": y, "return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def move_mouse(self, x: int, y: int):
        """Move mouse to the specified coordinates on the current page."""
        response = send_request(
            self.config.port,
            "move",
            "POST",
            {"x": x, "y": y, "return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def drag_mouse(self, path: str):
        """Drag mouse along a path of coordinates on the current page."""
        try:
            path_data = json.loads(path)
        except json.JSONDecodeError:
            print(f"Invalid JSON path format: {path}")
            sys.exit(3)

        response = send_request(
            self.config.port,
            "drag",
            "POST",
            {"path": path_data, "return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def type_text(self, text: str):
        """Type the given text at the current focused element on the current page."""
        response = send_request(
            self.config.port,
            "type",
            "POST",
            {"text": text, "return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def scroll_on_page(self, scroll_x: int, scroll_y: int):
        """Scroll by the specified number of pixels on the current page."""
        response = send_request(
            self.config.port,
            "scroll",
            "POST",
            {"scroll_x": scroll_x, "scroll_y": scroll_y, "return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def execute_script_on_page(self, script: str):
        """Execute a custom JavaScript code snippet on the current page."""
        response = send_request(
            self.config.port,
            "execute_script",
            "POST",
            {"script": script, "return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def navigate_back(self):
        """Navigate back in the browser history."""
        response = send_request(
            self.config.port,
            "navigate_back",
            "POST",
            {"return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def navigate_forward(self):
        """Navigate forward in the browser history."""
        response = send_request(
            self.config.port,
            "navigate_forward",
            "POST",
            {"return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def reload_page(self):
        """Reload the current webpage."""
        response = send_request(
            self.config.port,
            "reload",
            "POST",
            {"return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def wait_time(self, ms: int):
        """Wait for the specified number of milliseconds."""
        response = send_request(
            self.config.port,
            "wait",
            "POST",
            {"ms": ms, "return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def press_keys_on_page(self, keys: str):
        """Press the specified keys on the current page."""
        try:
            keys_data = json.loads(keys)
        except json.JSONDecodeError:
            print(f"Invalid JSON keys format: {keys}")
            sys.exit(4)

        response = send_request(
            self.config.port,
            "press_keys",
            "POST",
            {"keys": keys_data, "return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def set_browser_window_size(self, width: int, height: int):
        """Set the browser window size to the specified dimensions."""
        response = send_request(
            self.config.port,
            "set_window_size",
            "POST",
            {"width": width, "height": height, "return_screenshot": self.config.autoscreenshot},
        )
        if response is None:
            return
        _print_response_with_metadata(response)
        _autosave_screenshot_from_response(response, self.config.screenshot_mode)

    def get_console_output(self):
        """Get console output messages from the browser."""
        response = send_request(self.config.port, "console", "GET")
        if response is None:
            return
        _print_response_with_metadata(response)

    def execute_command(self, command: str, args: argparse.Namespace):
        """Execute the specified browser command with the provided arguments."""
        self.validate_command_args(command, args)

        if command == "open_site":
            self.open_site(args.url)
        elif command == "close_site":
            self.close_site()
        elif command == "screenshot_site":
            self.screenshot_site()
        elif command == "click_mouse":
            self.click_mouse(args.x, args.y, args.button or "left")
        elif command == "double_click_mouse":
            self.double_click_mouse(args.x, args.y)
        elif command == "move_mouse":
            self.move_mouse(args.x, args.y)
        elif command == "drag_mouse":
            self.drag_mouse(args.path)
        elif command == "type_text":
            self.type_text(args.text)
        elif command == "scroll_on_page":
            self.scroll_on_page(args.scroll_x, args.scroll_y)
        elif command == "execute_script_on_page":
            self.execute_script_on_page(args.script)
        elif command == "navigate_back":
            self.navigate_back()
        elif command == "navigate_forward":
            self.navigate_forward()
        elif command == "reload_page":
            self.reload_page()
        elif command == "wait_time":
            self.wait_time(args.ms)
        elif command == "press_keys_on_page":
            self.press_keys_on_page(args.keys)
        elif command == "set_browser_window_size":
            self.set_browser_window_size(args.width, args.height)
        elif command == "get_console_output":
            self.get_console_output()
        else:
            print(f"Unknown command: {command}")
            sys.exit(5)


def main():
    parser = argparse.ArgumentParser(
        description="Web browser automation tool with unified command interface",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Available commands:
  open_site              Open a website URL or local file
  close_site             Close the current browser window
  screenshot_site        Take a screenshot of the current page
  click_mouse            Click at specified coordinates on the page
  double_click_mouse     Double-click at specified coordinates
  move_mouse             Move mouse cursor to specified coordinates
  drag_mouse             Drag mouse along a path of coordinates
  type_text              Type text at the currently focused element
  scroll_on_page         Scroll the page by specified pixel amounts
  execute_script_on_page Execute custom JavaScript on the page
  navigate_back          Go back in browser history
  navigate_forward       Go forward in browser history
  reload_page            Refresh the current page
  wait_time              Wait for specified milliseconds
  press_keys_on_page     Press key combinations
  set_browser_window_size Resize the browser window
  get_console_output     Get browser console logs and errors

Examples:
  web_browser open_site --url "https://example.com"
  web_browser click_mouse --x 100 --y 200
  web_browser type_text --text "Hello World"
  web_browser execute_script_on_page --script "console.log('Hello')"
        """,
    )

    parser.add_argument("command", help="The browser command to execute")
    parser.add_argument("--url", help="URL to open")
    parser.add_argument("--x", type=int, help="X coordinate")
    parser.add_argument("--y", type=int, help="Y coordinate")
    parser.add_argument("--button", choices=["left", "right"], help="Mouse button")
    parser.add_argument("--text", help="Text to type")
    parser.add_argument("--script", help="JavaScript code to execute")
    parser.add_argument("--keys", help="JSON array of keys to press")
    parser.add_argument("--path", help="JSON array of coordinate pairs for drag path")
    parser.add_argument("--scroll_x", type=int, help="Horizontal scroll amount")
    parser.add_argument("--scroll_y", type=int, help="Vertical scroll amount")
    parser.add_argument("--width", type=int, help="Browser window width")
    parser.add_argument("--height", type=int, help="Browser window height")
    parser.add_argument("--ms", type=int, help="Time to wait in milliseconds")

    args = parser.parse_args()

    tool = WebBrowserTool()
    tool.execute_command(args.command, args)


if __name__ == "__main__":
    main()
