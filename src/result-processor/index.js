const logger = require('../utils/logger');

class ResultProcessor {
  formatIssueResult(result) {
    if (!result.success) {
      return this.formatError('Issue Analysis', result.error);
    }

    const output = result.output;
    
    if (output.raw) {
      return this.formatRawOutput('Issue Analysis', output);
    }

    return this.formatStructuredIssueResult(output);
  }

  formatPRResult(result) {
    if (!result.success) {
      return this.formatError('PR Review', result.error);
    }

    const output = result.output;
    
    if (output.raw) {
      return this.formatRawOutput('PR Review', output);
    }

    return this.formatStructuredPRResult(output);
  }

  formatCommentResult(result) {
    if (!result.success) {
      return this.formatError('Command Execution', result.error);
    }

    const output = result.output;
    
    if (output.raw) {
      return this.formatRawOutput('Command Result', output);
    }

    return this.formatStructuredCommandResult(output);
  }

  formatStructuredIssueResult(output) {
    let markdown = '## ü§ñ SWE-Agent Issue Analysis\n\n';
    
    if (output.summary) {
      markdown += `### Summary\n${output.summary}\n\n`;
    }
    
    if (output.analysis) {
      markdown += `### Analysis\n${output.analysis}\n\n`;
    }
    
    if (output.recommendations && output.recommendations.length > 0) {
      markdown += '### Recommendations\n';
      output.recommendations.forEach((rec, index) => {
        markdown += `${index + 1}. ${rec}\n`;
      });
      markdown += '\n';
    }
    
    if (output.code_suggestions && output.code_suggestions.length > 0) {
      markdown += '### Code Suggestions\n';
      output.code_suggestions.forEach((suggestion, index) => {
        markdown += `#### ${suggestion.file || `Suggestion ${index + 1}`}\n`;
        if (suggestion.description) {
          markdown += `${suggestion.description}\n\n`;
        }
        if (suggestion.code) {
          markdown += '```' + (suggestion.language || '') + '\n';
          markdown += suggestion.code + '\n';
          markdown += '```\n\n';
        }
      });
    }
    
    if (output.files_to_modify && output.files_to_modify.length > 0) {
      markdown += '### Files to Modify\n';
      output.files_to_modify.forEach(file => {
        markdown += `- \`${file}\`\n`;
      });
      markdown += '\n';
    }
    
    markdown += `---\n*Generated by SWE-Agent ‚Ä¢ Job ID: ${output.jobId || 'unknown'}*`;
    
    return markdown;
  }

  formatStructuredPRResult(output) {
    let markdown = '## üîç SWE-Agent PR Review\n\n';
    
    if (output.overall_assessment) {
      markdown += `### Overall Assessment\n${output.overall_assessment}\n\n`;
    }
    
    if (output.changes_summary) {
      markdown += `### Changes Summary\n${output.changes_summary}\n\n`;
    }
    
    if (output.issues && output.issues.length > 0) {
      markdown += '### Issues Found\n';
      output.issues.forEach((issue, index) => {
        markdown += `#### ${issue.severity || 'Issue'} ${index + 1}\n`;
        markdown += `**File:** \`${issue.file}\`\n`;
        if (issue.line) markdown += `**Line:** ${issue.line}\n`;
        markdown += `**Description:** ${issue.description}\n`;
        if (issue.suggestion) markdown += `**Suggestion:** ${issue.suggestion}\n`;
        markdown += '\n';
      });
    }
    
    if (output.suggestions && output.suggestions.length > 0) {
      markdown += '### Suggestions\n';
      output.suggestions.forEach((suggestion, index) => {
        markdown += `${index + 1}. ${suggestion}\n`;
      });
      markdown += '\n';
    }
    
    if (output.tests_needed) {
      markdown += '### Tests Needed\n';
      if (Array.isArray(output.tests_needed)) {
        output.tests_needed.forEach(test => {
          markdown += `- ${test}\n`;
        });
      } else {
        markdown += output.tests_needed + '\n';
      }
      markdown += '\n';
    }
    
    markdown += `---\n*Generated by SWE-Agent ‚Ä¢ Job ID: ${output.jobId || 'unknown'}*`;
    
    return markdown;
  }

  formatStructuredCommandResult(output) {
    let markdown = '## ‚ö° SWE-Agent Command Result\n\n';
    
    if (output.command) {
      markdown += `### Command Executed\n\`${output.command}\`\n\n`;
    }
    
    if (output.result) {
      markdown += `### Result\n${output.result}\n\n`;
    }
    
    if (output.output) {
      markdown += '### Output\n```\n';
      markdown += output.output + '\n';
      markdown += '```\n\n';
    }
    
    if (output.files_modified && output.files_modified.length > 0) {
      markdown += '### Files Modified\n';
      output.files_modified.forEach(file => {
        markdown += `- \`${file}\`\n`;
      });
      markdown += '\n';
    }
    
    markdown += `---\n*Generated by SWE-Agent ‚Ä¢ Job ID: ${output.jobId || 'unknown'}*`;
    
    return markdown;
  }

  formatRawOutput(title, output) {
    let markdown = `## ü§ñ SWE-Agent ${title}\n\n`;
    
    if (output.stdout && output.stdout.trim()) {
      markdown += '### Output\n```\n';
      markdown += output.stdout.trim() + '\n';
      markdown += '```\n\n';
    }
    
    if (output.stderr && output.stderr.trim()) {
      markdown += '### Errors/Warnings\n```\n';
      markdown += output.stderr.trim() + '\n';
      markdown += '```\n\n';
    }
    
    markdown += `---\n*Generated by SWE-Agent*`;
    
    return markdown;
  }

  formatError(operation, error) {
    return `## ‚ùå SWE-Agent ${operation} Failed\n\n` +
           `**Error:** ${error}\n\n` +
           `Please check the configuration and try again.\n\n` +
           `---\n*Generated by SWE-Agent*`;
  }

  extractMetrics(result) {
    const metrics = {
      success: result.success,
      duration: result.duration || null,
      filesAnalyzed: 0,
      issuesFound: 0,
      suggestionsProvided: 0
    };

    if (result.success && result.output && !result.output.raw) {
      const output = result.output;
      
      if (output.files_to_modify) {
        metrics.filesAnalyzed = output.files_to_modify.length;
      }
      
      if (output.issues) {
        metrics.issuesFound = output.issues.length;
      }
      
      if (output.suggestions) {
        metrics.suggestionsProvided = output.suggestions.length;
      } else if (output.recommendations) {
        metrics.suggestionsProvided = output.recommendations.length;
      }
    }

    return metrics;
  }
}

module.exports = new ResultProcessor();