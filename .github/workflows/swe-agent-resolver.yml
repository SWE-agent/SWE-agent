name: SWE-Agent Resolver
on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited]

jobs:
  check-mention:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.triggered }}
      context-type: ${{ steps.check.outputs.context }}
      command: ${{ steps.check.outputs.command }}
    steps:
      - id: check
        run: |
          # Determine the context
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            # Check if it's a PR comment or issue comment
            if [[ "${{ github.event.issue.pull_request }}" != "" ]]; then
              CONTEXT="pull_request_comment"
            else
              CONTEXT="issue_comment"
            fi
            BODY="${{ github.event.comment.body }}"
          elif [[ "${{ github.event_name }}" == "issues" ]]; then
            CONTEXT="issues"
            BODY="${{ github.event.issue.body }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CONTEXT="pull_request"
            BODY="${{ github.event.pull_request.body }}"
          fi
          
          # Check if bot was mentioned
          if [[ "$BODY" =~ @swe-agent-bot ]]; then
            echo "triggered=true" >> $GITHUB_OUTPUT
            echo "context=$CONTEXT" >> $GITHUB_OUTPUT
            
            # Extract command
            if [[ "$BODY" =~ @swe-agent-bot[[:space:]]+([a-zA-Z]+) ]]; then
              echo "command=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            else
              echo "command=fix" >> $GITHUB_OUTPUT
            fi
          fi

  run-swe-agent:
    needs: check-mention
    if: needs.check-mention.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          # Install base dependencies
          pip install PyGithub gitpython docker pyyaml
          
          # Clone and install SWE-agent properly
          git clone https://github.com/SWE-agent/SWE-agent.git /tmp/swe-agent
          cd /tmp/swe-agent
          pip install -e .
          
          # Copy config files to expected location
          mkdir -p $HOME/.swe-agent
          cp -r config $HOME/.swe-agent/
      
      - name: Get PR details if applicable
        id: pr-details
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]] && [[ "${{ github.event.issue.pull_request }}" != "" ]]; then
            # It's a PR comment, get PR details
            PR_NUMBER="${{ github.event.issue.number }}"
            PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")
            echo "pr-head-ref=$(echo "$PR_DATA" | jq -r .head.ref)" >> $GITHUB_OUTPUT
            echo "pr-base-ref=$(echo "$PR_DATA" | jq -r .base.ref)" >> $GITHUB_OUTPUT
            echo "issue-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "pr-head-ref=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
            echo "pr-base-ref=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
            echo "issue-number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "pr-head-ref=" >> $GITHUB_OUTPUT
            echo "pr-base-ref=" >> $GITHUB_OUTPUT
            echo "issue-number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Run SWE-agent wrapper
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          SWE_AGENT_MODEL: ${{ vars.SWE_AGENT_MODEL || 'gpt-4' }}
          SWE_AGENT_COST_LIMIT: ${{ vars.SWE_AGENT_COST_LIMIT || '2.0' }}
          SWE_AGENT_CONFIG_DIR: /tmp/swe-agent/config
        run: |
          python .github/scripts/swe_agent_wrapper.py \
            --context "${{ needs.check-mention.outputs.context-type }}" \
            --issue-number "${{ steps.pr-details.outputs.issue-number }}" \
            --repo "${{ github.repository }}" \
            --command "${{ needs.check-mention.outputs.command }}" \
            --pr-head-ref "${{ steps.pr-details.outputs.pr-head-ref }}" \
            --pr-base-ref "${{ steps.pr-details.outputs.pr-base-ref }}"