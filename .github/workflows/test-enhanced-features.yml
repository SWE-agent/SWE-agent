name: Test Enhanced SWE-Agent Features

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test-intent-detection:
    name: Test Intent Detection Logic
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Test intent detection and configuration
        run: |
          echo "🧪 Running Enhanced Features Test Suite"
          chmod +x ./test-enhanced-features.sh
          ./test-enhanced-features.sh

  test-syntax-validation:
    name: Validate Script Syntax
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate entrypoint.sh syntax
        run: |
          echo "🔍 Checking entrypoint.sh syntax..."
          bash -n entrypoint.sh
          echo "✅ Syntax validation passed"
      
      - name: Validate action.yml syntax
        run: |
          echo "🔍 Validating action.yml..."
          # Install yq for YAML validation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          # Validate YAML syntax
          yq eval '.' action.yml > /dev/null
          echo "✅ action.yml validation passed"

  test-configuration-matrix:
    name: Test Configuration Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        response_mode: [auto, patch, opinion, analysis]
        visual_content: [true, false]
        visual_format: [mermaid, ascii, code, all]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Test configuration combinations
        env:
          RESPONSE_MODE: ${{ matrix.response_mode }}
          ENABLE_VISUAL_CONTENT: ${{ matrix.visual_content }}
          VISUAL_CONTENT_FORMAT: ${{ matrix.visual_format }}
        run: |
          echo "🧪 Testing configuration: $RESPONSE_MODE | $ENABLE_VISUAL_CONTENT | $VISUAL_CONTENT_FORMAT"
          
          # Test environment variable handling
          export INPUT_RESPONSE_MODE="$RESPONSE_MODE"
          export INPUT_ENABLE_VISUAL_CONTENT="$ENABLE_VISUAL_CONTENT" 
          export INPUT_VISUAL_CONTENT_FORMAT="$VISUAL_CONTENT_FORMAT"
          export INPUT_MAX_COMMENT_LENGTH="32768"
          
          # Validate configuration is properly handled
          bash -c '
            RESPONSE_MODE="${INPUT_RESPONSE_MODE:-auto}"
            ENABLE_VISUAL_CONTENT="${INPUT_ENABLE_VISUAL_CONTENT:-true}"
            VISUAL_CONTENT_FORMAT="${INPUT_VISUAL_CONTENT_FORMAT:-all}"
            MAX_COMMENT_LENGTH="${INPUT_MAX_COMMENT_LENGTH:-65536}"
            
            echo "  ✅ RESPONSE_MODE: $RESPONSE_MODE"
            echo "  ✅ ENABLE_VISUAL_CONTENT: $ENABLE_VISUAL_CONTENT"
            echo "  ✅ VISUAL_CONTENT_FORMAT: $VISUAL_CONTENT_FORMAT"
            echo "  ✅ MAX_COMMENT_LENGTH: $MAX_COMMENT_LENGTH"
          '

  test-api-functions:
    name: Test AI API Functions Structure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Test API function definitions
        run: |
          echo "🔍 Testing AI API function definitions..."
          
          # Check if all required functions are defined
          functions_to_check=(
            "call_openai_api"
            "call_anthropic_api" 
            "call_openrouter_api"
            "call_gemini_api"
            "detect_request_intent"
            "handle_non_patch_request"
            "format_response_by_intent"
            "generate_visual_content"
            "add_contextual_reaction"
          )
          
          for func in "${functions_to_check[@]}"; do
            if grep -q "${func}()" entrypoint.sh; then
              echo "  ✅ Function $func found"
            else
              echo "  ❌ Function $func missing"
              exit 1
            fi
          done
          
          echo "✅ All required functions are defined"

  test-error-scenarios:
    name: Test Error Handling Scenarios
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Test missing environment variables
        run: |
          echo "🔍 Testing error handling for missing environment variables..."
          
          # Test missing GitHub context
          export GITHUB_REPOSITORY=""
          export ISSUE_NUMBER=""
          export COMMENT_ID=""
          export COMMENT_BODY=""
          
          # This should fail gracefully
          if bash -c 'source entrypoint.sh 2>/dev/null'; then
            echo "❌ Script should have failed with missing environment variables"
            exit 1
          else
            echo "✅ Script correctly handles missing environment variables"
          fi

  test-intent-detection-edge-cases:
    name: Test Intent Detection Edge Cases  
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Test edge cases in intent detection
        run: |
          echo "🧪 Testing intent detection edge cases..."
          
          # Create test script for edge cases
          cat > test_edge_cases.sh << 'EOF'
          #!/bin/bash
          
          # Test intent detection function
          detect_request_intent() {
              local comment="$1"
              local intent="patch"  # default
              
              # Convert to lowercase for case-insensitive matching
              local lower_comment=$(echo "$comment" | tr '[:upper:]' '[:lower:]')
              
              # Opinion/advice keywords
              if [[ "$lower_comment" =~ (opinion|advice|suggest|recommend|think|thoughts|what.*do.*you|should.*i|best.*practice|approach|strategy) ]]; then
                  intent="opinion"
              # Analysis keywords
              elif [[ "$lower_comment" =~ (analyze|analysis|explain|understand|investigate|examine|review|assess|evaluate|why|how.*work|what.*happen) ]]; then
                  intent="analysis"
              # Visual content keywords
              elif [[ "$lower_comment" =~ (chart|plot|graph|diagram|visualize|visualization|picture|image|screenshot|draw|show.*me.*visual) ]]; then
                  intent="visual"
              # Code fix keywords (explicit)
              elif [[ "$lower_comment" =~ (fix|patch|solve|resolve|implement|code|bug|error|issue) ]]; then
                  intent="patch"
              fi
              
              echo "$intent"
          }
          
          # Test cases with edge cases
          test_cases=(
              "empty:|patch"
              "Mixed CASE OpInIoN request|opinion"
              "Fix the BUG but also give me your ANALYSIS|patch"
              "What do you think? Fix this too.|opinion"
              "Show me visual chart analysis|visual"
              "debugging help needed|patch"
              "performance review and analysis|analysis"
          )
          
          echo "Testing edge cases:"
          for test_case in "${test_cases[@]}"; do
              comment="${test_case%|*}"
              expected="${test_case#*|}"
              result=$(detect_request_intent "$comment")
              
              if [ "$result" = "$expected" ]; then
                  echo "  ✅ '$comment' → $result"
              else
                  echo "  ❌ '$comment' → $result (expected: $expected)"
                  exit 1
              fi
          done
          
          echo "✅ All edge cases passed"
          EOF
          
          chmod +x test_edge_cases.sh
          ./test_edge_cases.sh

  integration-test:
    name: Integration Test (Mock Environment)
    runs-on: ubuntu-latest
    needs: [test-intent-detection, test-syntax-validation, test-api-functions]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup mock GitHub environment
        run: |
          echo "🔧 Setting up mock GitHub environment..."
          export GITHUB_REPOSITORY="test/repo"
          export ISSUE_NUMBER="123"
          export COMMENT_ID="456789"
          export ISSUE_TITLE="Test Integration Issue"
          export ISSUE_BODY="This is a test issue for integration testing"
          export COMMENT_BODY="@swe-agent What do you think about this approach?"
          export GITHUB_TOKEN="mock_token"
          
          # Test enhanced configuration
          export INPUT_RESPONSE_MODE="auto"
          export INPUT_ENABLE_VISUAL_CONTENT="true"
          export INPUT_VISUAL_CONTENT_FORMAT="all"
          export INPUT_MAX_COMMENT_LENGTH="65536"
          
          echo "✅ Mock environment configured"
          echo "  Repository: $GITHUB_REPOSITORY"
          echo "  Issue: #$ISSUE_NUMBER"
          echo "  Comment: ${COMMENT_BODY:0:50}..."

  documentation-check:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check documentation completeness
        run: |
          echo "📚 Checking documentation completeness..."
          
          required_files=(
            "README.md"
            "ENHANCED_FEATURES.md"
            "action.yml"
            "entrypoint.sh"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "  ✅ $file exists"
            else
              echo "  ❌ $file missing"
              exit 1
            fi
          done
          
          # Check if README mentions enhanced features
          if grep -q "Enhanced Response Modes" README.md; then
            echo "  ✅ README includes enhanced features documentation"
          else
            echo "  ❌ README missing enhanced features section"
            exit 1
          fi
          
          # Check if action.yml includes new parameters
          required_params=(
            "response_mode"
            "enable_visual_content"
            "visual_content_format"
            "max_comment_length"
          )
          
          for param in "${required_params[@]}"; do
            if grep -q "$param:" action.yml; then
              echo "  ✅ action.yml includes $param parameter"
            else
              echo "  ❌ action.yml missing $param parameter"
              exit 1
            fi
          done
          
          echo "✅ Documentation validation passed"

  security-check:
    name: Security and Best Practices Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check for security best practices
        run: |
          echo "🔒 Checking security best practices..."
          
          # Check for hardcoded secrets (basic check)
          if grep -r "sk-" . --exclude-dir=.git || \
             grep -r "xoxb-" . --exclude-dir=.git || \
             grep -r "ghp_" . --exclude-dir=.git; then
            echo "❌ Potential hardcoded secrets found"
            exit 1
          else
            echo "  ✅ No obvious hardcoded secrets found"
          fi
          
          # Check API key handling
          if grep -q 'INPUT.*API_KEY' entrypoint.sh; then
            echo "  ✅ API keys are properly handled via environment variables"
          else
            echo "  ❌ API key handling not found"
            exit 1
          fi
          
          # Check for proper error handling
          if grep -q 'set -e' entrypoint.sh; then
            echo "  ✅ Error handling is enabled (set -e)"
          else
            echo "  ⚠️ Consider adding 'set -e' for better error handling"
          fi
          
          echo "✅ Security check passed"

  performance-test:
    name: Performance and Resource Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check script performance characteristics
        run: |
          echo "⚡ Checking performance characteristics..."
          
          # Check script size
          script_size=$(wc -c < entrypoint.sh)
          echo "  📏 entrypoint.sh size: ${script_size} bytes"
          
          if [ "$script_size" -gt 100000 ]; then
            echo "  ⚠️ Script is quite large (>100KB), consider optimization"
          else
            echo "  ✅ Script size is reasonable"
          fi
          
          # Check for potential infinite loops (basic check)
          if grep -q "while true" entrypoint.sh || grep -q "for ((" entrypoint.sh; then
            echo "  ⚠️ Found potential infinite loops - ensure proper exit conditions"
          else
            echo "  ✅ No obvious infinite loop patterns found"
          fi
          
          # Check function count
          function_count=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*() {" entrypoint.sh)
          echo "  🔧 Number of functions: $function_count"
          
          echo "✅ Performance check completed"

  validate-action:
    name: Validate Action Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate action can be loaded
        uses: ./
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          response_mode: 'auto'
        env:
          # Mock required environment variables for validation
          GITHUB_REPOSITORY: 'test/repo'
          ISSUE_NUMBER: '1'
          COMMENT_ID: '123'
          COMMENT_BODY: 'test validation'
          ISSUE_TITLE: 'Test Issue'
          ISSUE_BODY: 'Test issue body'
        continue-on-error: true
        id: action-test
      
      - name: Check action loading result
        run: |
          if [ "${{ steps.action-test.outcome }}" = "failure" ]; then
            echo "⚠️ Action failed to load - this may be expected without proper API keys"
          else
            echo "✅ Action loaded successfully"
          fi
